// backend/seeders/boatTypeSeeder.js

const mongoose = require('mongoose');
require('dotenv').config();

// ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ MongoDB Connected');
  } catch (error) {
    console.error('‚ùå MongoDB Connection Error:', error);
    process.exit(1);
  }
};

// ÿ™ÿπÿ±€åŸÅ Schema ÿ®ÿ±ÿß€å BoatType
const boatTypeSchema = new mongoose.Schema({
  name_fa: { type: String, required: true },
  name_en: { type: String, required: true },
  description: { type: String },
  is_default: { type: Boolean, default: true },
  creator_id: { type: String, default: 'system' },
  synced: { type: Boolean, default: true },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now },
});

const BoatType = mongoose.model('BoatType', boatTypeSchema);

// ÿßŸÜŸàÿßÿπ ÿ¥ŸÜÿßŸàÿ± Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
const defaultBoatTypes = [
  {
    name_fa: 'ŸÅÿß€åÿ®ÿ±⁄ØŸÑÿßÿ≥',
    name_en: 'Fiberglass',
    description: 'ÿ¥ŸÜÿßŸàÿ± ÿ≥ÿßÿÆÿ™Ÿá ÿ¥ÿØŸá ÿßÿ≤ ŸÅÿß€åÿ®ÿ±⁄ØŸÑÿßÿ≥',
    is_default: true,
    creator_id: 'system',
    synced: true,
  },
  {
    name_fa: '€å⁄©ÿØÿßÿ± ⁄ÜŸàÿ®€å',
    name_en: 'Wooden Yekdar',
    description: 'ÿ¥ŸÜÿßŸàÿ± ÿ≥ŸÜÿ™€å ⁄ÜŸàÿ®€å €å⁄©ÿØÿßÿ±',
    is_default: true,
    creator_id: 'system',
    synced: true,
  },
  {
    name_fa: 'ŸÑŸÜÿ¨',
    name_en: 'Lenj',
    description: 'ÿ¥ŸÜÿßŸàÿ± ÿ≥ŸÜÿ™€å ŸÑŸÜÿ¨',
    is_default: true,
    creator_id: 'system',
    synced: true,
  },
  {
    name_fa: 'ŸÑŸÜÿ¨ €åÿÆ⁄ÜÿßŸÑÿØÿßÿ±',
    name_en: 'Ice Lenj',
    description: 'ŸÑŸÜÿ¨ ŸÖÿ¨Ÿáÿ≤ ÿ®Ÿá €åÿÆ⁄ÜÿßŸÑ',
    is_default: true,
    creator_id: 'system',
    synced: true,
  },
  {
    name_fa: '€å⁄©ÿØÿßÿ± ŸÅÿß€åÿ®ÿ±⁄ØŸÑÿßÿ≥',
    name_en: 'Fiberglass Yekdar',
    description: '€å⁄©ÿØÿßÿ± ÿ≥ÿßÿÆÿ™Ÿá ÿ¥ÿØŸá ÿßÿ≤ ŸÅÿß€åÿ®ÿ±⁄ØŸÑÿßÿ≥',
    is_default: true,
    creator_id: 'system',
    synced: true,
  },
  {
    name_fa: '€å⁄©ÿØÿßÿ± €åÿÆ⁄ÜÿßŸÑÿØÿßÿ±',
    name_en: 'Ice Yekdar',
    description: '€å⁄©ÿØÿßÿ± ŸÖÿ¨Ÿáÿ≤ ÿ®Ÿá €åÿÆ⁄ÜÿßŸÑ',
    is_default: true,
    creator_id: 'system',
    synced: true,
  },
];

// ÿ™ÿßÿ®ÿπ ÿßÿµŸÑ€å seed
const seedBoatTypes = async () => {
  try {
    console.log('üå± Starting Boat Types Seeding...');

    // Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ÿßŸÜŸàÿßÿπ ÿ¥ŸÜÿßŸàÿ± ŸÇÿ®ŸÑ€å (ÿßÿÆÿ™€åÿßÿ±€å)
    const existingCount = await BoatType.countDocuments();
    console.log(`üìä Existing boat types: ${existingCount}`);

    if (existingCount > 0) {
      console.log('‚ö†Ô∏è  Boat types already exist. Skipping seed...');
      console.log('üí° To force re-seed, delete existing boat types first.');
      return;
    }

    // ÿØÿ±ÿ¨ ÿßŸÜŸàÿßÿπ ÿ¥ŸÜÿßŸàÿ± Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
    const result = await BoatType.insertMany(defaultBoatTypes);
    console.log(`‚úÖ Successfully seeded ${result.length} boat types`);

    // ŸÜŸÖÿß€åÿ¥ ŸÑ€åÿ≥ÿ™
    console.log('\nüìã Seeded Boat Types:');
    result.forEach((type, index) => {
      console.log(`   ${index + 1}. ${type.name_fa} (${type.name_en})`);
    });

    console.log('\nüéâ Seeding completed successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding boat types:', error);
    throw error;
  }
};

// ÿßÿ¨ÿ±ÿß€å seeder
const run = async () => {
  try {
    await connectDB();
    await seedBoatTypes();
    console.log('\n‚úÖ All done! Closing connection...');
    await mongoose.connection.close();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  }
};

// ÿßÿ¨ÿ±ÿß
run();
